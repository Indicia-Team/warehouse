<report
    title="Sample data for sample details"
    description="Report used to retrieve details of a sample excluding custom attributes for the sample details prebuilt form."
>
  <query website_filter_field="website_id" created_by_field="s.created_by_id" training_filter_field="">
    with s as (
      -- Include occurrences on the sample.
      select 
        s.id, s.parent_sample_id, s.survey_id, s.external_key, snf.survey_title,
        snf.recorders, s.date_start, s.date_end, s.date_type, smp.entered_sref,
        snf.attr_sref_precision, s.location_name, snf.comment, smp.geom, 
        s.public_geom, s.created_by_id, s.website_id, s.created_on, s.updated_on,
        s.input_form, smp.privacy_precision, o.confidential, o.release_status, o.sensitive, o.id as occurrence_id,
        p.surname || case when p.first_name is null or p.first_name='' then '' else ', ' || p.first_name end as inputter
      from samples smp
      join cache_samples_functional s on s.id = smp.id
      join cache_samples_nonfunctional snf on snf.id = s.id
      left join cache_occurrences_functional o on o.sample_id = s.id
      join users u on u.id = s.created_by_id
      join people p on p.id = u.person_id
      where smp.id = #sample_id#

      UNION

      -- And occurrences on any subsamples too.
      select 
        s.id, s.parent_sample_id, s.survey_id, s.external_key, snf.survey_title,
        snf.recorders, s.date_start, s.date_end, s.date_type, smp.entered_sref,
        snf.attr_sref_precision, s.location_name, snf.comment, smp.geom, 
        s.public_geom, s.created_by_id, s.website_id, s.created_on, s.updated_on,
        s.input_form, smp.privacy_precision, o.confidential, o.release_status, o.sensitive, o.id as occurrence_id,
        p.surname || case when p.first_name is null or p.first_name='' then '' else ', ' || p.first_name end as inputter
      from samples smp
      join cache_samples_functional s on s.id = smp.id
      join cache_samples_nonfunctional snf on snf.id = s.id
      join cache_samples_functional subsamples on subsamples.parent_sample_id = s.id
      left join cache_occurrences_functional o on o.sample_id = subsamples.id
      join users u on u.id = s.created_by_id
      join people p on p.id = u.person_id
      where smp.id = #sample_id#
    )
    select #columns#
    from s
    #agreements_join#
    #joins#
    where #sharing_filter#
    AND (#allow_confidential# = 1 OR s.privacy_precision &gt; 0 OR s.privacy_precision IS NULL)
    -- Always include sensitive, as these are used to blur map (grid records are returned in different report)
    AND (#allow_unreleased# = 1 OR release_status = 'R' OR occurrence_id IS NULL OR sensitive = true)
    AND NOT EXISTS
    (
      SELECT s.id
      FROM samples s
      JOIN samples s_child
        ON s_child.parent_id = s.id
        AND (#allow_confidential# = 0 AND s_child.privacy_precision = 0 AND s_child.privacy_precision IS NOT NULL)
        AND s_child.deleted=false
      where s.id = #sample_id#
      AND s.deleted=false
    )
    AND NOT EXISTS
    (
      SELECT s.id
      FROM samples s
      LEFT JOIN samples s_child
        ON s_child.parent_id = s.id
        AND s_child.deleted=false
      JOIN occurrences o_conf
        ON (o_conf.sample_id = s.id OR o_conf.sample_id = s_child.id)
        AND (o_conf.confidential = true and #allow_confidential# = 0)
        AND o_conf.deleted=false
      where s.id = #sample_id#
      AND s.deleted=false
    )
  </query>
  <params>
    <param name='sample_id' display='Sample ID' description='ID of the sample to load' datatype='text' />
    <param name="allow_sensitive_full_precision" datatype="boolean" default="0"
           description="Allow viewing of sensitive records at full precision" />
    <param name="allow_confidential" datatype="boolean" default="0"
           description="Allow viewing of confidential records" />
    <param name="allow_unreleased" datatype="boolean" default="0"
          description="Allow viewing of unreleased records" />
  </params>
  <columns>
    <column name="sample_id" sql="s.id" />
    <column name="parent_sample_id" sql="parent_sample_id" />
    <column name="survey_id" sql="survey_id" />
    <column name="sample_external_key" sql="external_key" />
    <column name="survey_title" sql="survey_title" />
    <column name="recorder" sql="recorders" />
    <column name="inputter" sql="case inputter when recorders then null else inputter end" />
    <column name="date_start" sql="date_start" visible="false" />
    <column name="date_end" sql="date_end" visible="false" />
    <column name="date_type" sql="date_type" visible="false" />
    <column name="date" display="Date" datatype="date" />
    <column name="entered_sref" sql="case when coalesce(bool_or(sensitive), false) = false or #allow_sensitive_full_precision# = '1'
        then entered_sref
        else (select output_sref from cache_occurrences_nonfunctional onf join cache_occurrences_functional o on o.id = onf.id and o.sample_id = #sample_id# order by onf.sensitivity_precision desc nulls last limit 1) end"
        internal_sql="entered_sref" />
    <column name="sref_precision" sql="attr_sref_precision" />
    <column name="location_name" sql="location_name" />
    <column name="sample_comment" sql="case when coalesce(bool_or(sensitive), false) = false or #allow_sensitive_full_precision# = '1' then comment else null end"
      internal_sql="comment" />
    <column name="geom" sql="case
      when #allow_sensitive_full_precision#='1' then st_astext(geom)
      else coalesce(
        /* Show most sensitive polygon */
        (select st_astext(o.public_geom) 
         from cache_occurrences_nonfunctional onf
         join cache_occurrences_functional o on o.id = onf.id 
         and (o.sample_id = #sample_id# OR o.parent_sample_id = #sample_id#)
         order by onf.sensitivity_precision desc nulls last limit 1),
        /* If no occurrences, can revert to sample, but using public_geom allows for privacy. */
        st_astext(public_geom)
      )
    end" />
    <column name="lat" sql="st_y(st_transform(st_centroid(public_geom), 4326))" />
    <column name="long" sql="st_x(st_transform(st_centroid(public_geom), 4326))" />
    <column name="created_by_id" sql="s.created_by_id" />
    <column name="website_id" sql="s.website_id" />
    <column name="created_on" sql="s.created_on" />
    <column name="updated_on" sql="s.updated_on" />
    <column name='input_form' sql="s.input_form" />
    <column name="includes_confidential" sql="max(confidential::integer)" aggregate="true" />
    <column name="includes_unreleased" sql="max((release_status&lt;&gt;'R')::integer)" aggregate="true" />
    <column name="includes_sensitive" sql="max(sensitive::integer)" aggregate="true" />
  </columns>
</report>
